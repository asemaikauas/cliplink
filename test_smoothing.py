#!/usr/bin/env python3
"""
üéõÔ∏è –¢–ï–°–¢ –°–ì–õ–ê–ñ–ò–í–ê–ù–ò–Ø –î–í–ò–ñ–ï–ù–ò–ô –í –í–ï–†–¢–ò–ö–ê–õ–¨–ù–û–ú –ö–†–û–ü–ï

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è 
–¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—ë—Ä–≥–∞–Ω—å—è –≥–æ–ª–æ–≤—ã –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python test_smoothing.py <–ø—É—Ç—å_–∫_–≤–∏–¥–µ–æ>
    
–ü—Ä–∏–º–µ—Ä:
    python test_smoothing.py downloads/video.mp4
"""

import sys
import os
from pathlib import Path
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('app')

def test_smoothing_levels(video_path: str):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —É—Ä–æ–≤–Ω–∏ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    """
    try:
        from app.services.vertical_crop import crop_video_to_vertical, get_available_resolutions
        
        input_path = Path(video_path)
        if not input_path.exists():
            print(f"‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {video_path}")
            return
        
        print(f"üé¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è: {input_path.name}")
        
        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        test_dir = Path("test_smoothing")
        test_dir.mkdir(exist_ok=True)
        
        base_name = input_path.stem
        
        smoothing_levels = {
            "low": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (–±—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è)",
            "medium": "–°—Ä–µ–¥–Ω–µ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (–±–∞–ª–∞–Ω—Å)",
            "high": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (–æ—á–µ–Ω—å –ø–ª–∞–≤–Ω–æ)"
        }
        
        results = []
        
        for level, description in smoothing_levels.items():
            print(f"\nüéõÔ∏è === –¢–ï–°–¢: {level.upper()} SMOOTHING ===")
            print(f"üìù {description}")
            
            output_path = test_dir / f"{base_name}_smoothing_{level}.mp4"
            
            start_time = time.time()
            
            success = crop_video_to_vertical(
                input_path=input_path,
                output_path=output_path,
                resolution="shorts_hd",
                use_speaker_detection=True,
                smoothing_strength=level
            )
            
            processing_time = time.time() - start_time
            
            if success and output_path.exists():
                file_size_mb = output_path.stat().st_size / (1024*1024)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {output_path.name}")
                print(f"‚è±Ô∏è –í—Ä–µ–º—è: {processing_time:.1f} —Å–µ–∫")
                print(f"üìÅ –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB")
                
                results.append({
                    "level": level,
                    "description": description,
                    "file": output_path,
                    "size_mb": file_size_mb,
                    "time_sec": processing_time
                })
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {level}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
        print(f"\nüéâ === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
        print(f"üìÇ –ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ: {input_path.name}")
        print(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {test_dir}/")
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(results)}/3")
        
        if results:
            print(f"\nüìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
            for result in results:
                print(f"  üéõÔ∏è {result['level'].upper()}: {result['file'].name}")
                print(f"     ‚îî‚îÄ {result['description']}")
                print(f"     ‚îî‚îÄ –†–∞–∑–º–µ—Ä: {result['size_mb']:.1f} MB, –í—Ä–µ–º—è: {result['time_sec']:.1f} —Å–µ–∫")
            
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print(f"   ‚Ä¢ LOW    = –î–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–∏–Ω–∞–º–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω")
            print(f"   ‚Ä¢ MEDIUM = –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
            print(f"   ‚Ä¢ HIGH   = –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º)")
            
            print(f"\nüéØ –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª—ã –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ:")
            print(f"   –ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –≤—ã–≥–ª—è–¥–∏—Ç –ª—É—á—à–µ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ?")
        
    except ImportError:
        print("‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥—É–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫—Ä–æ–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install opencv-python pydub webrtcvad")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéõÔ∏è –¢–ï–°–¢–ï–† –°–ì–õ–ê–ñ–ò–í–ê–ù–ò–Ø –î–í–ò–ñ–ï–ù–ò–ô")
    print("=" * 50)
    
    if len(sys.argv) != 2:
        print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ!")
        print("   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_smoothing.py <–ø—É—Ç—å_–∫_–≤–∏–¥–µ–æ>")
        print("   –ü—Ä–∏–º–µ—Ä: python test_smoothing.py downloads/video.mp4")
        return
    
    video_path = sys.argv[1]
    test_smoothing_levels(video_path)

if __name__ == "__main__":
    main() 